;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit PE : 
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<3>, flip in_a : UInt<64>, flip in_b : UInt<64>, out : UInt<64>}
    
    reg temp_result : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[ALU.scala 25:28]
    node _T = eq(UInt<1>("h00"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      temp_result <= io.in_a @[ALU.scala 28:26]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        temp_result <= io.in_b @[ALU.scala 29:26]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _temp_result_T = and(io.in_a, io.in_b) @[ALU.scala 30:31]
          temp_result <= _temp_result_T @[ALU.scala 30:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _temp_result_T_1 = and(io.in_a, io.in_b) @[ALU.scala 31:33]
            node _temp_result_T_2 = not(_temp_result_T_1) @[ALU.scala 31:29]
            temp_result <= _temp_result_T_2 @[ALU.scala 31:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h04"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _temp_result_T_3 = or(io.in_a, io.in_b) @[ALU.scala 32:31]
              temp_result <= _temp_result_T_3 @[ALU.scala 32:26]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<3>("h05"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _temp_result_T_4 = or(io.in_a, io.in_b) @[ALU.scala 33:33]
                node _temp_result_T_5 = not(_temp_result_T_4) @[ALU.scala 33:29]
                temp_result <= _temp_result_T_5 @[ALU.scala 33:26]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<3>("h06"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  node _temp_result_T_6 = xor(io.in_a, io.in_b) @[ALU.scala 34:31]
                  temp_result <= _temp_result_T_6 @[ALU.scala 34:26]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<3>("h07"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    node _temp_result_T_7 = xor(io.in_a, io.in_b) @[ALU.scala 35:33]
                    node _temp_result_T_8 = not(_temp_result_T_7) @[ALU.scala 35:29]
                    temp_result <= _temp_result_T_8 @[ALU.scala 35:26]
                    skip @[Conditional.scala 39:67]
    io.out <= temp_result @[ALU.scala 37:10]
    
  module PE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in_a : UInt<64>, flip in_b : UInt<64>, flip wr_en : UInt<1>, flip wr_instr : UInt<3>, flip run : UInt<1>, out : UInt<64>}
    
    reg in_a_reg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[PE.scala 13:25]
    reg in_b_reg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[PE.scala 14:25]
    reg out_reg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[PE.scala 15:24]
    inst ALU64 of ALU @[PE.scala 17:21]
    ALU64.clock <= clock
    ALU64.reset <= reset
    cmem IQ : UInt<3>[100] @[PE.scala 19:15]
    reg PC : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[PE.scala 20:19]
    reg wr_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[PE.scala 21:24]
    reg instr : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[PE.scala 22:22]
    ALU64.io.in_a <= in_a_reg @[PE.scala 24:17]
    ALU64.io.in_b <= in_b_reg @[PE.scala 25:17]
    ALU64.io.opcode <= instr @[PE.scala 27:19]
    io.out <= out_reg @[PE.scala 28:10]
    when io.run : @[PE.scala 30:15]
      node _PC_T = add(PC, UInt<1>("h01")) @[PE.scala 31:14]
      node _PC_T_1 = tail(_PC_T, 1) @[PE.scala 31:14]
      PC <= _PC_T_1 @[PE.scala 31:8]
      infer mport instr_MPORT = IQ[PC], clock @[PE.scala 32:16]
      instr <= instr_MPORT @[PE.scala 32:11]
      in_a_reg <= io.in_a @[PE.scala 33:14]
      in_b_reg <= io.in_b @[PE.scala 34:14]
      out_reg <= ALU64.io.out @[PE.scala 35:13]
      skip @[PE.scala 30:15]
    else : @[PE.scala 36:23]
      when io.wr_en : @[PE.scala 36:23]
        node _wr_addr_T = add(wr_addr, UInt<1>("h01")) @[PE.scala 37:24]
        node _wr_addr_T_1 = tail(_wr_addr_T, 1) @[PE.scala 37:24]
        wr_addr <= _wr_addr_T_1 @[PE.scala 37:13]
        infer mport MPORT = IQ[wr_addr], clock @[PE.scala 38:7]
        MPORT <= io.wr_instr @[PE.scala 38:17]
        skip @[PE.scala 36:23]
    
